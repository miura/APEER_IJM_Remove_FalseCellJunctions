/*
  ImageJ macro for removing segmented cell-cell junctions 
  with weak fl. signal
  - meaning that that detected junction is 
  likely to be a result of oversegmentation -
  based on example generate_stack.ijm
 */

// General global vars
RESULTSPATH = "/output/";
BATCHMODE = "true";

// Read JSON Variables
call("CallLog.shout", "capturing WFE_JSON");
WFE_file = "/params/WFE_input_params.json";
if (!File.exists(WFE_file)) {
	call("CallLog.shout", "WFE_input_params.json does not exist... exiting...");
	eval("script", "System.exit(0);");
	} 
	else {
		call("CallLog.shout", "[Local Mode] WFE_input_params.json found... reading file...");
		WFE_JSON = File.openAsString(WFE_file);
	}
	
call("CallLog.shout", "WFE_JSON contents: " + WFE_JSON);

// Read JSON WFE Parameters
JSON_READER = "/JSON_Read.js";

if (!File.exists(JSON_READER)) {
	call("CallLog.shout", "JSON_Read.js does not exist... exiting...");
	eval("script", "System.exit(0);");
	} 
	else {
		call("CallLog.shout", "JSON_Read.js found... reading file...");
	}

call("CallLog.shout", "Reading JSON Parameters");

// Get WFE Json values as global vars
INPUTFILES = runMacro(JSON_READER, "settings.input_files[0]");
INPUTSTACK = runMacro(JSON_READER, "settings.input_files[0]");
PREFIX = runMacro(JSON_READER, "settings.prefix");
STACKNAME = runMacro(JSON_READER, "settings.name");
WFEOUTPUT = runMacro(JSON_READER, "settings.WFE_output_params_file");

// Getting input file path from WFE input_files
path_substring = lastIndexOf(INPUTFILES, "/");
IMAGEDIR_WFE = substring(INPUTFILES, 0, path_substring+1);

main();

function main() {
	call("CallLog.shout", "Starting opening files, time: " + currentTime());
	
	if (BATCHMODE=="true") {
		setBatchMode(true);
	}

 	importData();
 	stackID = getImageID();
	removeJunctions( stackID );
 	savingStack();
 	jsonOut();

	call("CallLog.shout", "DONE! " + currentTime());
	run("Close All");
	call("CallLog.shout", "Closed");
	shout("test print");
	print( "test macro print command" );
	eval("script", "System.exit(0);");
}

function importData() {
	call("CallLog.shout", "Importing Data");
	
	if (PREFIX == "no-filter") {
		call("CallLog.shout", "opening image stack in: "+ IMAGEDIR_WFE + " with no filter");
		//run("Image Sequence...", "open=" +IMAGEDIR_WFE +"  sort use");
		open( INPUTSTACK );
	}
	else {
		call("CallLog.shout", "opening  image stack in: "+ IMAGEDIR_WFE + " with filter: " + PREFIX);
		//run("Image Sequence...", "open=" +IMAGEDIR_WFE +" file="+ PREFIX +" sort use");
		open( INPUTSTACK );
	}
}

function savingStack() {
	if (STACKNAME=="output") {
		call("CallLog.shout", "writing tif stack with default name: output.tif");
		saveAs("Tiff", "/output/output.tif");
	}
	else {
		call("CallLog.shout", "writing tif stack with user name: " + STACKNAME + ".tif");
		saveAs("Tiff", "/output/" + STACKNAME + ".tif");
	}
}

// Generate output.json for WFE
function jsonOut() {
	call("CallLog.shout", "Starting JSON Output");
	jsonout = File.open(RESULTSPATH + "json_out.txt");
	call("CallLog.shout", "File open: JSON Output");
	
	print(jsonout,"{");
	print(jsonout,"\"RESULTSDATA\": [");

	if (STACKNAME=="output") {
		print(jsonout,"\t\"/output/output.tif\"");
	}
	else {
		print(jsonout,"\t\"/output/"+ STACKNAME + ".tif\"");
	}
	print(jsonout,"\t]");
	print(jsonout,"}");
	File.close(jsonout);
	File.rename(RESULTSPATH + "json_out.txt", RESULTSPATH + WFEOUTPUT);
	
	call("CallLog.shout", "Done with JSON Output");
}

function removeJunctions( stackID ){
	///////////////////////////////////////////////////////////////////////////////////////////////
	//// Name: WeakJunctionRemoval
	//// Author: Perrine Paul-Gilloteux and SÃ©bastien Tosi
	//// Version: 1.0
	////
	//// Usage:	Process the binary mask generated by TissueCellSegment to remove the low
	////		intensity junctions (measured in original movie).
	////		The resulting stack is exported as an image sequence to a user defined folder.
	//// Modified for Apeer Module: Kota Miura 20200415
	///////////////////////////////////////////////////////////////////////////////////////////////
	//open("findmaxima_segmented.tif"); 
	selectImage( stackID );
	//preparing image stacks
	overlaytitle = getTitle();
	run("Split Channels");
	SegmentedCells = "C1-" + overlaytitle;
	OriginalMovie = "C2-" + overlaytitle;
	JunctionThr = 50;
	
	
	// Initialization
	run("Options...", "iterations=1 count=1 edm=Overwrite do=Nothing");
	run("Set Measurements...", "  mean redirect="+OriginalMovie+" decimal=2");
	//setBatchMode(true);
	newImage("CorrectedMask", "8-bit Black", getWidth(), getHeight(), nSlices);
	
	// Main loop over the slices
	for(s=1;s<=nSlices;s++) {
		
		// Set current slice in all stacks
		selectImage("CorrectedMask");
		setSlice(s);
		selectImage(OriginalMovie);
		setSlice(s);
		selectImage(SegmentedCells);
		setSlice(s);
		
		// Skeletonize and identify junctions / vertices
		run("Duplicate...", "title=Copy");
		//run("Invert", "slice");
		CopyID = getImageID();	
		run("Skeletonize (2D/3D)");
	 
		run("Analyze Skeleton (2D/3D)", "prune=none prune_0");
		AnalyzedSkeletonID = getImageID();
	
		// Add all junctions to ROI manager and measure mean intensity in original stack
		setThreshold(100, 255);
	 // Threshold junctions: vertices value: 70, junctions value: 127
		run("Analyze Particles...", "size=0-Infinity circularity=0.00-1.00 show=Nothing display clear add");
		roiManager("Show None");
	
		// Select non null pixels in the skeleton --> mask
		selectImage(AnalyzedSkeletonID);
		setThreshold(1, 255);
		run("Convert to Mask", "method=Default background=Dark black");
		run("Invert LUT");
		resetThreshold(); 
	
		// Erase the weak junctions
		N = roiManager("count");
		for (i=0;i<N;i++)
		{
			if(getResult("Mean",i)<JunctionThr)
			{
				roiManager("Select", i);
				run("Set...", "value=0 slice");
			}
		}
	
		// Copy to CorrectedMask
		run("Select All");
		run("Copy");
		selectImage("CorrectedMask");
		run("Paste");
	
		// Cleanup
		selectImage(AnalyzedSkeletonID);
		run("Close");
		selectImage(CopyID);
		run("Close");
	}
	
	// Exit
	selectImage(SegmentedCells);
	close();
	selectImage(OriginalMovie);
	close();
	selectImage("CorrectedMask");
	run("Invert", "stack");
	run("Invert LUT");
	run("Select None");
	setBatchMode("exit & display");
	run("Set Measurements...", "  mean redirect=None decimal=2");
}

/*
 * functions for support tasks
 */
// Get SystemTimer
 function currentTime() {
     MonthNames = newArray("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
     DayNames = newArray("Sun", "Mon","Tue","Wed","Thu","Fri","Sat");

     getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);

     timeString = DayNames[dayOfWeek]+" ";

     if (dayOfMonth<10) {timeString = timeString + "0";}
     timeString = timeString+dayOfMonth+"-"+MonthNames[month]+"-"+year+" @ ";

     if (hour<10) {timeString = timeString + "0";}
     timeString = timeString+hour+":";

     if (minute<10) {timeString = timeString + "0";}
     timeString = timeString+minute+":";

     if (second<10) {timeString = timeString + "0";}
     timeString = timeString+second;

     return timeString;
} 

function shout( out ){
	sc = "java.lang.System.out.println( '" + out + "' )";
	eval("js", sc);
} 